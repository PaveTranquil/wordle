from random import choice, randint
from urllib.parse import unquote

from requests import exceptions, get
from vk_api import VkApi

from settings import VK_API_TOKEN


def check_connection() -> bool:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—ë–º. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ ‚Äî False.'''
    try:
        response = get('https://ru.wiktionary.org/')
        if not response.ok or response.status_code != 200:
            raise exceptions.ConnectionError
    except exceptions.ConnectionError:
        return False
    return True


def check_word_existence(word: str) -> bool:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –≤ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ ‚Äî False.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ---------
    word: str
        —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    '''

    if len(word) != 5:
        return False

    res = get('https://ru.wiktionary.org/w/api.php', {
        'action': 'opensearch',
        'search': word,
        'format': 'json'
    }).json()[1]

    if not res:
        return False
    if word.lower() in [w.lower() for w in res]:
        return True
    return False


def get_new_word() -> str:
    '''–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø—è—Ç–∏–±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–°–ª–æ–≤–∞_–∏–∑_5_–±—É–∫–≤/ru.
    –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é, –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
    '''
    if not check_connection():
        return get_word_from_local()

    res = get('https://ru.wiktionary.org/wiki/–°–ª—É–∂–µ–±–Ω–∞—è:RandomInCategory/–°–ª–æ–≤–∞_–∏–∑_5_–±—É–∫–≤/ru')
    word = unquote(res.url).split('/')[-1]
    while (any(case in res.text for case in [
        '–∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ', '–≤—É–ª—å–≥–∞—Ä–Ω–æ–µ', '—Å–ª–µ–Ω–≥–æ–≤–æ–µ', ', –æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ',
        '—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ', '—Å—Ç–∞—Ä–∏–Ω–Ω–æ–µ', '—Ä–µ–¥–∫–æ–µ', '—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ', '—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ'
    ])
            or '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ' not in res.text or word == word.title()):
        res = get('https://ru.wiktionary.org/wiki/–°–ª—É–∂–µ–±–Ω–∞—è:RandomInCategory/–°–ª–æ–≤–∞_–∏–∑_5_–±—É–∫–≤/ru')
        word = unquote(res.url).split('/')[-1]

    return word.lower()


def get_word_from_local() -> str:
    '''–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –ø—è—Ç–∏–±—É–∫–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.'''

    with open('5lenwords_russian_base.txt', encoding='utf-8') as file:
        return choice(file.readlines()).strip()


def msg(id_: int, message: str = '', board: list = None, attach: str = '', parse: bool = True):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é vk_session.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    ---------
    id_: int
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    message: str = ''
        —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    board: list = None ([])
        –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–∞—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    attach: str = ''
        –≤–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–º—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    parse: bool = True
        –Ω–∞–¥–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –∫—Ä–µ–ø–∏—Ç—å –∫ –Ω–∏–º —Å–Ω–∏–ø–ø–µ—Ç—ã
    '''

    if board is None:
        board = []
    vk.messages.send(peer_id=id_, random_id=randint(-2 ** 31, 2 ** 31 - 1), message=message,
                     keyboard=board, dont_parse_links=not parse, attachment=attach)
    print('üì® {1}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´{0}¬ª'.format(message.replace('\n', ' '), id_))


vk_session = VkApi(token=VK_API_TOKEN)
vk = vk_session.get_api()
